`${e}\` (${typeof e})`);return e};e.exports={spawnedKill:(e,t="SIGTERM",r={})=>{const n=e(t);return a(e,t,r,n),n},spawnedCancel:(e,t)=>{e.kill()&&(t.isCanceled=!0)},setupTimeout:(e,{timeout:t,killSignal:r="SIGTERM"},n)=>{if(0===t||void 0===t)return n;if(!Number.isInteger(t)||t<0)throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`);let i;const a=new Promise((n,a)=>{i=setTimeout(()=>{((e,t,r)=>{e.kill(t),r(Object.assign(new Error("Timed out"),{timedOut:!0,signal:t}))})(e,r,a)},t)}),o=n.finally(()=>{clearTimeout(i)});return Promise.race([a,o])},setExitHandler:async(e,{cleanup:t,detached:r},n)=>{if(!t||r)return n;const a=i(()=>{e.kill()});return n.finally(()=>{a()})}}},function(e,t,r){var n,i=r(106),a=r(474),o=r(28);function s(){l&&(l=!1,a.forEach((function(e){try{process.removeListener(e,u[e])}catch(e){}}))